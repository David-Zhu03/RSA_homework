#include <iostream>
#include "GenerateKey.h"

void printBigNumber(const std::string& label, const BigNumber& bn) {
    std::cout << label << ": " << bn.toString() << std::endl;
}

int main() {
    int bitSizes[] = {512, 768, 1024, 2048};

    for (int bits : bitSizes) {
        std::cout << "=== Generating RSA key pair with " << bits << " bits ===" << std::endl;

        BigNumber e, d, n;
        generateRSAKeyPair(bits, e, d, n);

        printBigNumber("Public exponent e", e);
        printBigNumber("Private exponent d", d);
        printBigNumber("Modulus n", n);
        std::cout << std::endl;
    }

    return 0;
}

// macbookpro@zhuzhihangdeMacBook-Pro RSA % ./step2_test
// === Generating RSA key pair with 512 bits ===
// Public exponent e: 65537
// Private exponent d: 35659567439239386867348290237716041478635493492104756497630164289175434366878404160970278932674779824086430168991486707547761656300798673177569888957554913
// Modulus n: 94715938691149862086625796275804336969495596052203510844824028411270586127183616001007913311839091192165025231886224587911343323689670422748891674775038507

// === Generating RSA key pair with 768 bits ===
// Public exponent e: 65537
// Private exponent d: 1012199838884396839048635053169655790446252224314090590074529855408874710158786577416552120270231135962963265231255372833368169192278446129159920202794664867732917475967127524826396127341496542988492664749832201966372323216622480193
// Modulus n: 1940572807189524796417341314052765373814534051745628217929863770592423996012064004333857252110640590849658422462578605988465661226320924899114680524182232091584009375360116323430238531382214263705535422639816149134402395190827119899

// === Generating RSA key pair with 1024 bits ===
// Public exponent e: 65537
// Private exponent d: 284907515057323915020177185959811155484736879850390934003702812703839323241997956080024510509258786937496920127723985859346083201959247305509288848855575963036555747289743717524521793740943053836159194708445525576373960674841376518203117874268879775902069494992288945268761917300363839646346003065439756169473
// Modulus n: 1555998651192653118223112686354011974750266741229589220150055936347626477275901670634713862103774426626894637867553905105330354567233599221763521940620656903832496341696276574536911487105478271079184588226144937132401759663327493990690913788265535933426147752853909545546368724600885029769957768215077025839219

// === Generating RSA key pair with 2048 bits ===
// Public exponent e: 65537
// Private exponent d: 302811675243207148294821731828772361232670401429770367441762912589787428418884475979353310364560449402249700628540394928003770010874199366728577422444327214357841971226659942597335665806149455551687221527760176241356876282958923245133766277056505276198975821450908771754134039945615360241214985190155422273996784682762232945449749440683515299490597843447641281252836237774458363016680635501199280261071360130732944804185777811722289982505140916220258541927034715873077500648133444772352047080482263844553815452507061024068134500644357686317197386514376390682657598373476142985592870218214377736836462842101415690249633
// Modulus n: 364088442959877940040687101452331888346552187764926717137813785429337492364071255109598361703307798493317163485289079611730292901877968038917767966219639177488577416997479455079193269303715428632853127804957503996363872547677893714868395628074415878442260230987363240949798788704492888328627634696593390015429083617728394992996491962053485254868311788635653947165710705043644488124867181482254962270833609590552660933726539070167997974887175615807328440095586239448717200469440293129524721863122283811005544062094156167572899615295129575619101774353653488511388157741964828865202178527931954472031332410173969296076287